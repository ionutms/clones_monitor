name: Monitor Repository Clones and Update Traffic Data

on:
  schedule:
    - cron: '0 */2 * * *'
    - cron: '5 */2 * * *'
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  monitor-traffic:
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Bucharest
      GH_TOKEN: ${{ secrets.TRAFIC_UPDATE_TOKEN }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: sersoft-gmbh/setup-gh-cli-action@v2.0.1
    
    - name: Debug GitHub CLI
      run: |
        gh --version
        gh auth status
    
    - name: Initialize CSV files
      run: |
        declare -A files=(
          ["kicad_symbols_generator"]="KiCAD_Symbols_Generator"
          ["minimal_adp1032"]="Minimal_ADP1032"
          ["minimal_max14906"]="Minimal_MAX14906"
          ["minimal_ad74413r"]="Minimal_AD74413R"
          ["modular_software_configurable_io_plc"]="Modular_Software_Configurable_IO_PLC"
          ["minimal_adin1110"]="Minimal_ADIN1110"
          ["minimal_ltc9111"]="Minimal_LTC9111"
          ["minimal_spoe_hybrid"]="Minimal_SPoE_Hybrid"
        )
        
        for file_prefix in "${!files[@]}"; do
          if [ ! -f "${file_prefix}_clones_history.csv" ]; then
            echo "clone_timestamp,total_clones,unique_clones" > "${file_prefix}_clones_history.csv"
          fi
          if [ ! -f "${file_prefix}_visitors_history.csv" ]; then
            echo "visitor_timestamp,total_visitors,unique_visitors" > "${file_prefix}_visitors_history.csv"
          fi
        done
    
    - name: Fetch traffic data
      run: |
        fetch_traffic() {
          local repo=$1
          local output_prefix=$2
          local type=$3
          local endpoint="clones"
          local output_type="clones"
          
          if [ "$type" = "visitors" ]; then
            endpoint="views"
            output_type="visitors"
          fi
          
          response=$(gh api "repos/ionutms/$repo/traffic/$endpoint" 2>/dev/null)
          if [ -z "$response" ]; then
            echo "Error: Unable to fetch traffic data for $repo"
            return
          fi
          
          echo "$response" | jq -r ".${endpoint} // [] | 
            map([
              (.timestamp | sub(\"T.*\";\"\") | sub(\"Z$\";\"\")) ,
              .count,
              .uniques
            ] | @csv)[]" >> "${output_prefix}_${output_type}_history.csv"
        }
        
        declare -A repos=(
          ["kicad_symbols_generator"]="KiCAD_Symbols_Generator"
          ["minimal_adp1032"]="Minimal_ADP1032"
          ["minimal_max14906"]="Minimal_MAX14906"
          ["minimal_ad74413r"]="Minimal_AD74413R"
          ["modular_software_configurable_io_plc"]="Modular_Software_Configurable_IO_PLC"
          ["minimal_adin1110"]="Minimal_ADIN1110"
          ["minimal_ltc9111"]="Minimal_LTC9111"
          ["minimal_spoe_hybrid"]="Minimal_SPoE_Hybrid"
        )
        
        for output_prefix in "${!repos[@]}"; do
          fetch_traffic "${repos[$output_prefix]}" "$output_prefix" "clones"
          fetch_traffic "${repos[$output_prefix]}" "$output_prefix" "visitors"
        done
    
    - name: Remove duplicate rows
      run: |
        process_csv() {
          local input=$1
          local header=$2
          local temp="${input%.csv}_fixed.csv"
          
          echo "$header" > "$temp"
          awk -F, 'NR>1 { data[$1] = $0 } END { for(k in data) print data[k] }' "$input" | \
            sort -t, -k1 >> "$temp"
          mv "$temp" "$input"
        }
        
        for csv in *_clones_history.csv; do
          process_csv "$csv" "clone_timestamp,total_clones,unique_clones"
        done
        
        for csv in *_visitors_history.csv; do
          process_csv "$csv" "visitor_timestamp,total_visitors,unique_visitors"
        done
    
    - name: Commit and push traffic data
      run: |
        git config user.name 'GitHub Actions Bot'
        git config user.email '<>'
        git add *_history.csv
        
        if [[ -n $(git status -s) ]]; then
          git commit -m "Update clone and visitor statistics for $(date +"%Y-%m-%d %H:%M:%S %Z")"
          git pull --rebase origin main || true  # Prevent failure if no changes
          git push origin main
        else
          echo "No changes to commit."
        fi
