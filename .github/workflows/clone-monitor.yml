name: Monitor Repository Clones

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, and 18:00 UTC)
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  monitor-clones:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout clones_monitor repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
      
    - name: Setup GitHub CLI
      uses: sersoft-gmbh/setup-gh-cli-action@v2.0.1
      
    - name: Fetch clone statistics
      env:
        GH_TOKEN: ${{ secrets.CLONE_MONITOR_TOKEN }}
      run: |
        # Ensure CSV exists with header if it doesn't
        if [ ! -f clones_history.csv ]; then
          echo "clone_timestamp,total_clones,unique_clones" > clones_history.csv
        fi
        
        # Fetch clones for the main branch of one public repository and append to CSV
        repo="ionutms/KiCAD_Symbols_Generator"
        gh api "repos/$repo/traffic/clones?per_page=100&ref=main" | \
        jq -r '
          .clones |
          map([
            (.timestamp | sub("T.*";"") | sub("Z$";"")) ,
            .count,
            .uniques
          ] | @csv)[]
        ' >> clones_history.csv
    
    - name: Remove duplicate rows from CSV
      run: |
        awk '
          BEGIN { FS=OFS="," }
          NR==1 { header=$0; print $0; next }
          {
            # Store the latest row for each unique timestamp
            data[$1] = $0
          }
          END {
            # Print the latest row for each unique timestamp
            for (timestamp in data) {
              print data[timestamp]
            }
          }
        ' clones_history.csv | sort -t, -k1 > clones_history_unique.csv
        
        # Replace the original file with the deduplicated version
        mv clones_history_unique.csv clones_history.csv
    
    - name: Commit and push clone data
      run: |
        git config user.name 'GitHub Actions Bot'
        git config user.email '<>'
        
        # Stage only the CSV file
        git add clones_history.csv
        
        # Check if there are any changes to commit
        if [[ -n $(git status -s) ]]; then
          git commit -m "Update clone statistics for $(date -u +"%Y-%m-%d %H:%M:%S")"
          git pull --rebase origin main
          git push origin main
        else
          echo "No new clone data to update"
        fi